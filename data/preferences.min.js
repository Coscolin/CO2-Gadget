var relaxedSecurity=false;var forceCaptivePortalActive=false;var preferencesDebug=false;function fetchVersion(){fetch("/getVersion").then(response=>response.json()).then(versionInfo=>{if(preferencesDebug)console.log("Version information:",versionInfo);const versionElement=document.getElementById("co2GadgetVersion");const versionText=`CO2 Gadget: v${versionInfo.firmVerMajor}.${versionInfo.firmVerMinor}.${versionInfo.firmRevision}-${versionInfo.firmBranch} (Flavour: ${versionInfo.firmFlavour})`;versionElement.innerText=versionText}).catch(error=>console.error("Error fetching version information:",error))}function populateFormWithPreferences(preferences){if(preferences.relaxedSecurity!==undefined){if(preferencesDebug)console.log(`Setting relaxedSecurity to:`,preferences.relaxedSecurity);relaxedSecurity=preferences.relaxedSecurity}handlePasswordFields();const setFormValue=(elementId,value)=>{const element=document.getElementById(elementId);if(element)element.value=value;if(preferencesDebug)console.log(`Setting ${elementId} to:`,value)};const setFormCheckbox=(elementId,isChecked)=>{const element=document.getElementById(elementId);if(element)element.checked=isChecked;if(preferencesDebug)console.log(`Setting ${elementId} to:`,isChecked)};setFormCheckbox("activeWIFI",preferences.activeWIFI);setFormValue("wifiSSID",preferences.wifiSSID);if(relaxedSecurity)setFormValue("wifiPass",preferences.wifiPass);setFormValue("hostName",preferences.hostName);setFormCheckbox("useStaticIP",preferences.useStaticIP);setFormValue("staticIP",preferences.staticIP);setFormValue("gateway",preferences.gateway);setFormValue("subnet",preferences.subnet);setFormValue("dns1",preferences.dns1);setFormValue("dns2",preferences.dns2);setFormValue("selCO2Sensor",preferences.selCO2Sensor);setFormCheckbox("autoSelfCalibration",preferences.autoSelfCal);setFormValue("customCalValue",preferences.customCalValue);setFormValue("co2OrangeRange",preferences.co2OrangeRange);setFormValue("co2RedRange",preferences.co2RedRange);setFormValue("tempOffset",preferences.tempOffset);setFormCheckbox("showFahrenheit",preferences.showFahrenheit);setFormValue("altitudeMeters",preferences.altitudeMeters);setFormValue("measurementInterval",preferences.measurementInterval);setFormCheckbox("outModeRelay",preferences.outModeRelay);setFormValue("channelESPNow",preferences.channelESPNow);setFormValue("boardIdESPNow",preferences.boardIdESPNow);setFormValue("peerESPNowAddress",preferences.peerESPNowAddress);setFormValue("neopixBright",preferences.neopixBright);setFormValue("selNeopxType",preferences.selNeopxType);setFormCheckbox("activeBLE",preferences.activeBLE);setFormCheckbox("activeMQTT",preferences.activeMQTT);setFormCheckbox("activeESPNOW",preferences.activeESPNOW);setFormValue("mqttClientId",preferences.mqttClientId);setFormCheckbox("mqttShowInCon",preferences.mqttShowInCon);setFormValue("rootTopic",preferences.rootTopic);setFormValue("mqttBroker",preferences.mqttBroker);setFormValue("mqttUser",preferences.mqttUser);if(relaxedSecurity)setFormValue("mqttPass",preferences.mqttPass);setFormValue("batDischgd",preferences.batDischgd);setFormValue("batChargd",preferences.batChargd);setFormValue("vRef",preferences.vRef);setFormValue("tToDispOff",preferences.tToDispOff);setFormValue("tToPubMQTT",preferences.tToPubMQTT);setFormValue("tToPubESPNow",preferences.tToPubESPNow);setFormValue("tKeepAlMQTT",preferences.tKeepAlMQTT);setFormValue("tKeepAlESPNow",preferences.tKeepAlESPNow);setFormCheckbox("showTemp",preferences.showTemp);setFormCheckbox("showHumidity",preferences.showHumidity);setFormCheckbox("showBattery",preferences.showBattery);setFormCheckbox("showCO2",preferences.showCO2);setFormCheckbox("dispOffOnExP",preferences.dispOffOnExP);setFormCheckbox("displayReverse",preferences.displayReverse);setFormValue("DisplayBright",preferences.DisplayBright);setFormCheckbox("debugSensors",preferences.debugSensors);setFormValue("toneBzrBeep",preferences.toneBzrBeep);setFormValue("durBzrBeep",preferences.durBzrBeep);setFormValue("timeBtwnBzr",preferences.timeBtwnBzr);if(preferences.cpNoTimeout!==undefined){setFormCheckbox("cpNoTimeout",preferences.cpNoTimeout)}if(preferences.cpRelaxedSec!==undefined){setFormCheckbox("cpRelaxedSec",preferences.cpRelaxedSec)}if(preferences.cpDebug!==undefined){setFormCheckbox("cpDebug",preferences.cpDebug)}if(preferences.cpWaitTime!==undefined){setFormValue("cpWaitTime",preferences.cpWaitTime)}toggleVisibility("activeWIFI","wifiNetworks",isChecked=>{document.getElementById("mqttConfig").style.display=isChecked?"block":"none"});toggleVisibility("activeMQTT","mqttConfig");toggleVisibility("activeESPNOW","espNowConfig");toggleVisibility("useStaticIP","staticIPSettings");handleWiFiMQTTDependency()}function loadPreferencesFromServer(){fetch("/getActualSettingsAsJson"+(relaxedSecurity?"?relaxedSecurity=true":"")).then(response=>response.json()).then(preferences=>{if(preferencesDebug)console.log("Get preferences from server response:",preferences);populateFormWithPreferences(preferences)}).catch(error=>console.error("Error retrieving preferences:",error))}function collectPreferencesData(){const preferencesData={customCalValue:document.getElementById("customCalValue").value,tempOffset:document.getElementById("tempOffset").value,altitudeMeters:document.getElementById("altitudeMeters").value,autoSelfCalibration:document.getElementById("autoSelfCalibration").checked,co2OrangeRange:document.getElementById("co2OrangeRange").value,co2RedRange:document.getElementById("co2RedRange").value,DisplayBright:document.getElementById("DisplayBright").value,neopixBright:document.getElementById("neopixBright").value,selNeopxType:document.getElementById("selNeopxType").value,activeBLE:document.getElementById("activeBLE").checked,activeWIFI:document.getElementById("activeWIFI").checked,activeMQTT:document.getElementById("activeMQTT").checked,activeESPNOW:document.getElementById("activeESPNOW").checked,rootTopic:document.getElementById("rootTopic").value,batDischgd:document.getElementById("batDischgd").value,batChargd:document.getElementById("batChargd").value,vRef:document.getElementById("vRef").value,tToDispOff:document.getElementById("tToDispOff").value,tToPubMQTT:document.getElementById("tToPubMQTT").value,tToPubESPNow:document.getElementById("tToPubESPNow").value,tKeepAlMQTT:document.getElementById("tKeepAlMQTT").value,tKeepAlESPNow:document.getElementById("tKeepAlESPNow").value,dispOffOnExP:document.getElementById("dispOffOnExP").checked,wifiSSID:document.getElementById("wifiSSID").value,hostName:document.getElementById("hostName").value,useStaticIP:document.getElementById("useStaticIP").checked,staticIP:document.getElementById("staticIP").value,gateway:document.getElementById("gateway").value,subnet:document.getElementById("subnet").value,dns1:document.getElementById("dns1").value,dns2:document.getElementById("dns2").value,selCO2Sensor:document.getElementById("selCO2Sensor").value,debugSensors:document.getElementById("debugSensors").checked,displayReverse:document.getElementById("displayReverse").checked,showFahrenheit:document.getElementById("showFahrenheit").checked,measurementInterval:document.getElementById("measurementInterval").value,outModeRelay:document.getElementById("outModeRelay").checked,channelESPNow:document.getElementById("channelESPNow").value,boardIdESPNow:document.getElementById("boardIdESPNow").value,peerESPNowAddress:document.getElementById("peerESPNowAddress").value,showTemp:document.getElementById("showTemp").checked,showHumidity:document.getElementById("showHumidity").checked,showBattery:document.getElementById("showBattery").checked,showCO2:document.getElementById("showCO2").checked,mqttClientId:document.getElementById("mqttClientId").value,mqttShowInCon:document.getElementById("mqttShowInCon").checked,mqttBroker:document.getElementById("mqttBroker").value,mqttUser:document.getElementById("mqttUser").value,toneBzrBeep:document.getElementById("toneBzrBeep").value,durBzrBeep:document.getElementById("durBzrBeep").value,timeBtwnBzr:document.getElementById("timeBtwnBzr").value,lowPowerMode:document.getElementById("lowPowerMode").value,waitToDeep:document.getElementById("waitToDeep").value,timeSleeping:document.getElementById("timeSleeping").value,cyclsWifiConn:document.getElementById("cyclsWifiConn").value,cycRedrawDis:document.getElementById("cycRedrawDis").value,actBLEOnWake:document.getElementById("actBLEOnWake").checked,actWifiOnWake:document.getElementById("actWifiOnWake").checked,actMQTTOnWake:document.getElementById("actMQTTOnWake").checked,actESPnowWake:document.getElementById("actESPnowWake").checked,displayOnWake:document.getElementById("deepSleepData.displayOnWake").checked};if(relaxedSecurity){preferencesData.wifiPass=document.getElementById("wifiPass").value;preferencesData.mqttPass=document.getElementById("mqttPass").value}const cpNoTimeout=document.getElementById("cpNoTimeout");if(cpNoTimeout){preferencesData.cpNoTimeout=cpNoTimeout.checked}const cpRelaxedSec=document.getElementById("cpRelaxedSec");if(cpRelaxedSec){preferencesData.cpRelaxedSec=cpRelaxedSec.checked}const cpDebug=document.getElementById("cpDebug");if(cpDebug){preferencesData.cpDebug=cpDebug.checked}const cpWaitTime=document.getElementById("cpWaitTime");if(cpWaitTime){preferencesData.cpWaitTime=cpWaitTime.value}console.log("Collected preferences data:",preferencesData);return preferencesData}function showSavingPopup(){const popup=document.getElementById("popup");popup.style.display="block";console.log("Show popup");setTimeout(()=>{popup.style.display="none";console.log("Hide popup")},2e3)}function savePreferences(){showSavingPopup();const preferencesData=collectPreferencesData();if(preferencesDebug)console.log("Sending preferences to server:",preferencesData);fetch("/savePreferences",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(preferencesData)}).then(response=>{if(response.ok){console.log("Preferences updated successfully!")}else{alert("Error updating preferences. Please try again.")}}).catch(error=>console.error("Error saving preferences:",error))}function restartESP32(){const isConfirmed=confirm("Are you sure you want to restart the ESP32?");if(isConfirmed){if(preferencesDebug)console.log("Restarting ESP32...");fetch("/restart",{method:"GET",headers:{"Content-Type":"text/plain"}}).then(response=>{if(response.ok){console.log("ESP32 restart initiated")}else{throw new Error(`HTTP error! Status: ${response.status}`)}}).catch(error=>console.error("Error restarting ESP32:",error))}}function backupPreferences(){const preferencesData=collectPreferencesData();const jsonData=JSON.stringify(preferencesData);const blob=new Blob([jsonData],{type:"application/json"});const a=document.createElement("a");a.href=URL.createObjectURL(blob);a.download="preferences_backup.json";document.body.appendChild(a);a.click();document.body.removeChild(a);alert("Preferences backup completed successfully!")}function restorePreferencesFromData(preferencesData){const preferences=JSON.parse(preferencesData);populateFormWithPreferences(preferences)}function chooseFileAndRestore(){document.getElementById("fileInput").click()}function handleFileSelection(event){const file=event.target.files[0];if(file){const reader=new FileReader;reader.readAsText(file,"UTF-8");reader.onload=evt=>{const preferencesData=evt.target.result;restorePreferencesFromData(preferencesData)};reader.onerror=evt=>{console.error("Error reading file:",evt.target.error);alert("Error reading file. Please try again.")}}}function toggleVisibility(checkboxId,elementId,callback){const checkbox=document.getElementById(checkboxId);const element=document.getElementById(elementId);if(!checkbox||!element){console.error(`Checkbox or element not found: ${checkboxId}, ${elementId}`);return}const toggleElement=()=>{element.style.display=checkbox.checked?"block":"none";if(callback)callback(checkbox.checked)};toggleElement();checkbox.addEventListener("change",toggleElement)}function handleWiFiMQTTDependency(){const wifiCheckbox=document.getElementById("activeWIFI");const mqttCheckbox=document.getElementById("activeMQTT");if(!wifiCheckbox||!mqttCheckbox){console.error("Checkboxes not found: activeWIFI, activeMQTT");return}const updateMQTTState=()=>{if(!wifiCheckbox.checked){mqttCheckbox.checked=false;mqttCheckbox.disabled=true;document.getElementById("mqttConfig").style.display="none"}else{mqttCheckbox.disabled=false}};const updateWiFiState=()=>{if(mqttCheckbox.checked){wifiCheckbox.checked=true}toggleVisibility("activeMQTT","mqttConfig")};wifiCheckbox.addEventListener("change",updateMQTTState);mqttCheckbox.addEventListener("change",updateWiFiState);updateMQTTState();updateWiFiState()}function updateVoltage(){fetch("/readBatteryVoltage").then(response=>response.text()).then(voltage=>{document.getElementById("currentVoltage").textContent=voltage+" Volts"}).catch(error=>console.error("Error fetching battery voltage:",error))}function updateVRef(){const vRefValue=document.getElementById("vRef").value;fetch(`/settings?SetVRef=${vRefValue}`).then(response=>{if(!response.ok)throw new Error("Error updating VRef");console.log("VRef updated successfully")}).catch(error=>console.error("Error updating VRef:",error))}setInterval(updateVoltage,1e3);document.getElementById("vRef").addEventListener("input",()=>{setTimeout(updateVRef,100)});function handlePasswordFields(){const inputField=document.getElementById("wifiSSID");const passwordFields=document.querySelectorAll("input[type=password]");passwordFields.forEach(field=>{if(relaxedSecurity){field.removeAttribute("disabled")}else{field.disabled=true;field.value="";field.placeholder="Password (disabled)"}});if(relaxedSecurity){inputField.removeAttribute("readonly")}else{inputField.setAttribute("readonly","readonly")}}document.addEventListener("DOMContentLoaded",()=>{var currentURL=window.location.href;if(currentURL.includes("preferences.html")){highlightCurrentPage();relaxedSecurity=currentURL.includes("relaxedSecurity");forceCaptivePortalActive=currentURL.includes("forceCaptivePortalActive");handlePasswordFields();loadPreferencesFromServer();fetchVersion();toggleVisibility("activeWIFI","wifiNetworks",isChecked=>{document.getElementById("mqttConfig").style.display=isChecked?"block":"none"});toggleVisibility("activeMQTT","mqttConfig");toggleVisibility("activeESPNOW","espNowConfig");toggleVisibility("useStaticIP","staticIPSettings");handleWiFiMQTTDependency()}});